{"version":3,"sources":["pages/Join.tsx","component/List.tsx","component/Message.tsx","component/Input.tsx","pages/Room.tsx","pages/Home.tsx","layout/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Join","useState","name","setName","Grid","container","justifyContent","style","padding","marginTop","item","xs","sm","md","Paper","direction","alignItems","spacing","TextField","onChange","e","target","value","variant","placeholder","Button","component","Nav","to","List","ListData","subheader","ListSubheader","height","overflow","map","key","ListItem","dense","ListItemIcon","ListItemText","Message","text","user","console","log","Position","width","Typography","elevation","Input","socket","sendMessage","message","setMessage","multiline","rows","fullWidth","onKeyPress","onClick","Room","location","messages","setMessages","users","setUsers","messagesRef","useRef","useEffect","socketClient","queryString","parse","search","emit","on","userInfoArray","disconnect","current","scrollTop","scrollHeight","overflowY","ref","preventDefault","StyledImg","Styled","img","StyledPre","pre","StyledGrid","StyledTypography","Home","theme","createTheme","typography","h3","fontSize","fontWeight","breakpoints","up","h4","h5","paddingTop","body1","lineHeight","ThemeProvider","Link","size","src","alt","href","startIcon","Header","meunOpen","setMeunOpen","SideMenuToggle","prevState","ListContent","DomLink","Divider","alert","AppBar","position","IconButton","edge","color","aria-label","paddingLeft","Drawer","open","onClose","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82b3c2c1.chunk.js","sourcesContent":["import Grid  from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { useState } from \"react\";\nimport { Link as Nav} from \"react-router-dom\";\n\nfunction Join() {\n  const [name, setName] = useState(\"\"); \n  return (\n    <Grid container justifyContent=\"center\" style={{ padding: \"1em\", marginTop: '10px' }}>\n      <Grid item xs={12} sm={9} md={7}>\n        <Paper>\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n            <Grid item>이름을 입력하고 입장을 하시오.</Grid>\n            <Grid item>\n              <TextField\n                name=\"userName\"\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n                variant=\"outlined\"\n                placeholder=\"이름을 입력해주세요.\"\n              ></TextField>\n            </Grid>\n            <Grid item>\n              <Button variant=\"contained\"  component={Nav} to={`/room?name=${name}`}>\n                입장\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n}\nexport default Join;\n","import { List as Container} from '@material-ui/core';\nimport ListSubheader from \"@material-ui/core/ListSubheader\"\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport PersonIcon from '@material-ui/icons/Person';\n\ninterface ListProps {\n    ListData: Array<any>\n}\n\nfunction List({ListData}: ListProps){\n    return (\n        <Container \n            subheader={\n                <ListSubheader>접속자 목록</ListSubheader>\n            }\n            style={{ height: \"150px\", overflow: \"auto\"}}     \n        >   \n            {ListData.map((value, key)=> {\n                const { name } = value;\n                return (\n                    <ListItem key={key} dense={true}>\n                        <ListItemIcon>\n                            <PersonIcon />\n                        </ListItemIcon>\n                        <ListItemText>\n                            {name}\n                        </ListItemText>\n                    </ListItem>\n                ) \n            })}\n            \n        </Container>\n    );\n}\nexport default List;","import Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\n\ninterface MessageProps {\n    name: string;\n    text: string;\n    user: string;\n}\n\nfunction Message({name, text, user}: MessageProps){\n    console.log(user, name);\n    const Position = user === name ? \"flex-end\" : \"flex-start\";\n    return (\n        <Grid container direction=\"column\" alignItems={Position} spacing={2} style={{width: \"100%\", padding: \"10px 10px\"}}>\n            <Grid item>\n                <Typography>{name}</Typography>\n            </Grid>\n            <Grid item>\n                <Paper elevation={3} style={{ padding: \"10px 20px\"}}>\n                    {text}\n                </Paper>\n            </Grid>        \n        </Grid>\n    )\n}\nexport default Message;","import TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\ninterface InputProps {\n  sendMessage: (e) => void;\n  message: string;\n  setMessage: (e) => void;\n}\n\nfunction Input({sendMessage, message, setMessage}: InputProps){\n    return (\n      <Grid\n        container\n        justifyContent=\"center\"\n        alignItems=\"stretch\"\n        style={{ padding: \"10px\", marginTop: \"10px\" }}\n      >\n        <Grid item xs={10}>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            rows={2}\n            fullWidth\n            placeholder=\"메시지를 입력하세요.\"\n            value={message}\n            onChange={(e) => {\n              setMessage(e.target.value);\n            }}\n            onKeyPress={(e) => (e.key === \"Enter\" ? sendMessage(e) : null)}\n          />\n        </Grid>\n        <Grid item xs={2} container>\n          <Button variant=\"contained\" fullWidth onClick={(e) => sendMessage(e)}>\n            전송\n          </Button>\n        </Grid>\n      </Grid>\n    );\n}\nexport default Input;","import queryString from \"query-string\";\nimport {useEffect, useState, useRef} from \"react\";\nimport socketClient from \"socket.io-client\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"../component/List\";\nimport Message from \"../component/Message\";\nimport Input from \"../component/Input\";\n\nconst Server = \"/\";\nlet socket;\n\nfunction Room({location}) {\n  const [name, setName] = useState(\"\"); \n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const messagesRef = useRef<HTMLDivElement>(null);\n \n  useEffect(()=>{\n    socket = socketClient(Server);\n    const { name } = queryString.parse(location.search);\n    setName(name);\n\n    socket.emit(\"join\", { name });\n\n    socket.on(\"usersInfo\",(userInfoArray)=> {\n      setUsers(userInfoArray);\n    });\n\n    return ()=>{\n      socket.disconnect();\n    }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[Server, location.search]);\n\n  useEffect(()=>{\n    socket.on(\"message\",(message)=>{\n      setMessages(messages => [ ...messages, message ]);\n    });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[]);\n\n  useEffect(() => {\n    messagesRef.current!.scrollTop = messagesRef.current!.scrollHeight;\n  }, [messages]);\n\n  const sendMessage = (e)=> {\n    e.preventDefault();\n    if(message){\n      socket.emit(\"sendMessage\",name, message,()=>{setMessage(\"\")});\n    }\n  };\n  return (\n    <Grid container justifyContent=\"center\" style={{ padding: \"1em\" }}>\n      <Grid item xs={12} sm={9} md={7}>\n        <Paper>\n          <List ListData={users} />\n        </Paper>\n      </Grid>\n\n      <Grid item xs={12} sm={9} md={7} style={{ marginTop: \"10px\"}}>\n        <Paper>\n          <div style={{ height: \"400px\", overflowY: \"auto\" }} ref={messagesRef}>\n            {messages.map((value, key) => {\n              return (\n                <Message\n                  key={key}\n                  name={value.name}\n                  text={value.message}\n                  user={name}\n                />\n              );\n            })}\n          </div>\n          <Input\n            sendMessage={sendMessage}\n            message={message}\n            setMessage={setMessage}\n          />\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n}\nexport default Room;\n","import Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport { Link } from \"react-router-dom\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport Styled from \"styled-components\";\n\nfunction Home(){\n    /**\n     * 메인 타이틀 h3 compoent=\"h1\"\n     * 서브 타이틀 h4 component=\"h2\"\n     * 서서브 타이틀 h5 component=\"h3\"\n     * 내용 body1\n     */\n    const theme = createTheme();\n    theme.typography.h3 = {\n      fontSize: \"1.8rem\",\n      fontWeight: 700,\n      [theme.breakpoints.up(\"sm\")]: {\n        fontSize: \"2rem\",\n      },\n      [theme.breakpoints.up(\"md\")]: {\n        fontSize: \"2.5rem\",\n      },\n    };\n    theme.typography.h4 = {\n      fontSize: \"1.6rem\",\n      marginTop: \"2rem\",\n      [theme.breakpoints.up(\"sm\")]: {\n        fontSize: \"1.8rem\",\n      },\n      [theme.breakpoints.up(\"md\")]: {\n        fontSize: \"2rem\",\n      },\n    };\n    theme.typography.h5 = {\n      fontSize: \"1.4rem\",\n      paddingTop: \"1rem\",\n      [theme.breakpoints.up(\"sm\")]: {\n        fontSize: \"1.5rem\",\n      },\n      [theme.breakpoints.up(\"md\")]: {\n        fontSize: \"1.7rem\",\n      },\n    };\n    theme.typography.body1 = {\n        lineHeight: \"1.9rem\"\n    }\n       \n    \n    return (\n      <ThemeProvider theme={theme}>\n        <StyledGrid container justifyContent=\"center\">\n          <Grid xs={11} sm={9} md={10}  >\n            <Grid item>\n              <Typography variant=\"subtitle1\">\n                2021.10.08 - React 개인 프로젝트\n              </Typography>\n              <Typography variant=\"h3\" component=\"h1\">\n                React + Node.js + Socket.io로 채팅 만들기\n              </Typography>\n            </Grid>\n            <Grid item>\n              <StyledTypography variant=\"h5\" component=\"h3\">\n                CSS Framewokr: material-UI 사용\n              </StyledTypography>\n              <Button\n                variant=\"outlined\"\n                component={Link}\n                to=\"/join\"\n                size=\"large\"\n              >\n                채팅방 입장하기\n              </Button>\n            </Grid>\n            <Grid item>\n              <StyledTypography variant=\"body1\">\n                <b>react</b>를 이용하여 채팅어플리케이션을 만들고 <b>Heroku</b>\n                를 이용하여 배포하기\n              </StyledTypography>\n              <Typography variant=\"h5\" component=\"h3\">\n                0. 디렉토리 구조\n              </Typography>\n              <Grid xs={11} sm={9} md={6}>\n                <StyledImg\n                  src=\"images/directory.png\"\n                  alt=\"directory\"\n                />\n              </Grid>\n              <StyledTypography variant=\"body1\">\n                  작업한 디렉토리 구조는 페이지를 담당하는 컴포넌트는 src/pages<br/>\n                  header같은 레이아웃을 담당하는 컴포넌트는 src/layout<br/>\n                  그 안에 가장 작은 부분부분을 담당하는 컴포넌트는 src/component에 분류하였습니다.\n              </StyledTypography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h4\" component=\"h2\">\n                1. 환경세팅\n              </Typography>\n              <StyledTypography variant=\"body1\">\n                패키지 관리 툴로는 yarn을 사용하였습니다. 개인적으로 yarn이\n                편해서 사용하였습니다. 이부분은 따로 설명없이 넘어가겠습니다.<br/>\n                먼저 react 프로젝트 먼저 생성합니다. 그리고 하위에 server라는 폴더를 생성\n              </StyledTypography>\n              <StyledPre >\n                npx create-react-app \"이름\" -template typescript\n              </StyledPre>\n              <Typography variant=\"body1\">\n                socket.io 설치\n              </Typography>\n              <StyledPre >\n                yarn add socket.io\n              </StyledPre>\n              <Typography variant=\"h4\" component=\"h3\">2. 서버 생성</Typography>\n              <StyledTypography variant=\"body1\">\n                앞서 만들었던 server 폴더 안에 index.js 라는 파일을 만듭니다.<br/>\n                express로 서버를 구성할 것 입니다. 먼저 라이브러리를 설치해 줍니다.\n              </StyledTypography>\n              <StyledPre>\n                yarn add express \n              </StyledPre>\n              <StyledPre>\n              {`//server/index.js\n              \nconst express = require(\"express\");\nconst path = require(\"path\");\nconst app = express();\nconst server = require(\"http\").Server(app);\nconst io = require(\"socket.io\")(server, {\n  cors: {\n      origin: \"*\",\n      methods: [\"GET\", \"POST\"],\n    },\n}); \nconst port = process.env.PORT || 3005;\n\nserver.listen(port, ()=>{\n  console.log(port + \"포트에서 수신중\");\n});`}\n              </StyledPre>\n              <StyledTypography variant=\"body1\">\n                위 코드 작성 후   \n              </StyledTypography>\n              <StyledPre>\n                node server/index.js\n              </StyledPre>\n              <StyledTypography variant=\"body1\">\n                정상적으로 작성하셨다면 \"3005포트에서 수신중\" 이라는 콘솔 메시지를 확인할 수 있을 것입니다. \n              </StyledTypography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h4\" component=\"h3\">3. 클라이언트 작성</Typography>\n              <StyledTypography variant=\"body1\">\n                클라이언트를 작성하고 서버와 연결까지 해보겠습니다. 우선 socket.io-client를 설치해 줍니다.\n              </StyledTypography>\n              <StyledPre>\n                yarn add socket.io-client\n              </StyledPre>\n              <StyledPre>\n{`//src/app.tsx\n\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SocketClient from 'socket.io-client';\n\nconst SERVER = \"localhost:3005\";\n\nfunction App() {\n  const socket = SocketClient(SERVER);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n`}\n              </StyledPre>\n              <StyledTypography variant=\"body1\">\n                이제 socket 이라는 상수를 이용하여 백엔드에서 발생하는 이벤트를 받을수 있습니다.<br/>\n                예시로 클라이언트가 연결되면 콘솔 메시지를 받아봅시다.\n              </StyledTypography>\n              <StyledPre>\n              {`//server/index.js\n              \nconst express = require(\"express\");\nconst path = require(\"path\");\nconst app = express();\nconst server = require(\"http\").Server(app);\nconst io = require(\"socket.io\")(server, {\n  cors: {\n      origin: \"*\",\n      methods: [\"GET\", \"POST\"],\n    },\n}); \nconst port = process.env.PORT || 3005;\n\nio.on(\"connection\", (socket) => {\n  console.log('새로운 클라이언트가 입장하였습니다.');\n  socket.emit('connection');\n});\n\nserver.listen(port, ()=>{\n  console.log(port + \"포트에서 수신중\");\n});`}\n              </StyledPre>\n              <StyledPre>\n              {`//src/app.tsx\n\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SocketClient from 'socket.io-client';\n\nconst SERVER = \"localhost:3005\";\n\nfunction App() {\n  const socket = SocketClient(SERVER);\n  socket.on(\"connection\", () => {\n    console.log(\"백엔드와 연결되었습니다.\")\n  });\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n`}\n              </StyledPre>\n              <StyledTypography variant=\"body1\">\n                브라우저 콘솔에는 \"백엔드와 연결되었습니다.\" 메시자가 출력 되어야 합니다.\n                간단한 코드 몇줄로 nodejs + express로 만든 서버와 프론트(react-app)을 연결해 보았습니다.\n              </StyledTypography>\n            </Grid>\n\n\n\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                target=\"_blank\"\n                href=\"https://github.com/yeong-gil/Chatting-app\"\n                startIcon={<GitHubIcon />}\n              >\n                GIT HUB\n              </Button>\n            </Grid>\n          </Grid>\n        </StyledGrid>\n      </ThemeProvider>\n    );\n}\n\nconst StyledImg = Styled.img`\n  display: inline-block;\n  width: 100%;\n  padding-top: 20px;\n`;\nconst StyledPre = Styled.pre`\n  background-color: #fafafa;\n  padding: 20px;\n  overflow-x: auto;\n`;\nconst StyledGrid = Styled(Grid)`\n  padding: 60px 0 60px 0;\n`;\nconst StyledTypography = Styled(Typography)`\n  padding-top: 20px;\n`;\n\n\nexport default Home;","import { useState } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport ToolBar from \"@material-ui/core/Toolbar\"\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Drawer from '@material-ui/core/Drawer';\nimport Divider from \"@material-ui/core/Divider\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Link from \"@material-ui/core/Link\";\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport Grid from \"@material-ui/core/Grid\";\nimport { Link as DomLink} from \"react-router-dom\";\n\nfunction Header(){\n    let menuWidth = 200;\n    const [meunOpen, setMeunOpen] = useState(false);\n    const SideMenuToggle = () => {\n        setMeunOpen((prevState)=> (!prevState));\n    };\n\n    const ListContent = (\n        <List style={{ width: menuWidth}}>\n            <ListItem>\n                <ListItemText>\n                    <Link component={DomLink} to=\"/\" onClick={SideMenuToggle}>홈</Link>\n                </ListItemText>\n            </ListItem>\n            <Divider></Divider>\n            <ListItem>\n                <ListItemText>\n                    <Link component={DomLink} to=\"/join\" onClick={SideMenuToggle}>입장하기</Link>\n                </ListItemText>\n            </ListItem>\n            <ListItem>\n                <ListItemText>\n                    {/* <Link component={DomLink} to=\"/join\" onClick={SideMenuToggle}>방 리스트보기</Link> */}\n                    <Link onClick={()=> alert(\"준비중입니다.\")}>방 리스트</Link>\n                </ListItemText>\n            </ListItem>\n        </List>\n    );\n    return(\n        <AppBar position=\"static\">\n            <ToolBar>  \n                <Grid container justifyContent=\"space-between\">\n                    <Grid item>\n                        <IconButton onClick={SideMenuToggle} edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" component=\"span\" style={{ paddingLeft: 12}}>채팅 어플리케이션</Typography>\n                    </Grid>\n                    <Grid item>\n                        <IconButton edge=\"end\" target=\"_blank\" href=\"https://github.com/yeong-gil/Chatting-app\" color=\"inherit\">\n                            <GitHubIcon />\n                        </IconButton>\n                    </Grid>\n                </Grid>            \n            </ToolBar>\n            <Drawer variant=\"temporary\" open={meunOpen} onClose={SideMenuToggle}>\n                {ListContent}\n            </Drawer>\n        </AppBar>\n    )\n}\nexport default Header;","import { Switch, Route } from \"react-router-dom\";\nimport { Join, Room, Home }  from \"./pages/index.js\";\nimport { Header } from \"./layout/index.js\"\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/join\" component={Join} />\n        <Route path=\"/room\" component={Room} />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}